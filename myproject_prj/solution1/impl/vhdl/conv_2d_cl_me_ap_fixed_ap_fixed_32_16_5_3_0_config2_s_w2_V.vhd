-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2d_cl_me_ap_fixed_ap_fixed_32_16_5_3_0_config2_s_w2_V_rom is 
    generic(
             DWIDTH     : integer := 15; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 216
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2d_cl_me_ap_fixed_ap_fixed_32_16_5_3_0_config2_s_w2_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "010011001001110", 1 => "001000000001110", 2 => "011110010100101", 
    3 => "000110010000110", 4 => "110011010011000", 5 => "101110111111111", 
    6 => "010110101111100", 7 => "100011000111011", 8 => "101011001001111", 
    9 => "101011011110110", 10 => "001001100000110", 11 => "010111111001010", 
    12 => "111101110001000", 13 => "011110001001100", 14 => "111001110011001", 
    15 => "001100110111110", 16 => "011001001110101", 17 => "111011001010100", 
    18 => "000110000010011", 19 => "101000000011101", 20 => "110110110110111", 
    21 => "000111010011111", 22 => "101111110011101", 23 => "100101101001001", 
    24 => "001100011001011", 25 => "000111010101011", 26 => "110000000111011", 
    27 => "101010011111100", 28 => "011111001110000", 29 => "011001100100111", 
    30 => "011000101010110", 31 => "011001000100010", 32 => "000110111100000", 
    33 => "011100011011011", 34 => "100101111101110", 35 => "000101010101011", 
    36 => "011111000101111", 37 => "001000010011100", 38 => "111111111110011", 
    39 => "000111010011101", 40 => "101110101000111", 41 => "100011000101111", 
    42 => "100111100100001", 43 => "100111100000101", 44 => "111110010001010", 
    45 => "100010111011111", 46 => "000001111000101", 47 => "100011010100011", 
    48 => "011100111011100", 49 => "110011100010001", 50 => "010101101000100", 
    51 => "101001111110111", 52 => "100100100011000", 53 => "011111011001110", 
    54 => "101011000010001", 55 => "001111101000000", 56 => "100111111011001", 
    57 => "010111101111011", 58 => "001111100101000", 59 => "011110001110001", 
    60 => "100010111010001", 61 => "101001110011110", 62 => "100111111111111", 
    63 => "000011110100110", 64 => "001101110110111", 65 => "010000101001001", 
    66 => "111010010101010", 67 => "101011000001010", 68 => "111100011001011", 
    69 => "010101100110101", 70 => "001000000011001", 71 => "010000010000000", 
    72 => "101001101111010", 73 => "010000101000000", 74 => "111111011110001", 
    75 => "111100101001001", 76 => "110110101010111", 77 => "110000100100101", 
    78 => "111001010010110", 79 => "001100111110001", 80 => "101001010100001", 
    81 => "111110011111010", 82 => "001111011100010", 83 => "111010010111010", 
    84 => "000011100011100", 85 => "010101100011110", 86 => "010110000011000", 
    87 => "000110100100010", 88 => "010000001101110", 89 => "100001011010010", 
    90 => "000101110011101", 91 => "110111111000001", 92 => "100010000110111", 
    93 => "010101110100001", 94 => "110001000010011", 95 => "010011001111011", 
    96 => "110101110001101", 97 => "001011101100000", 98 => "010000011011010", 
    99 => "000111100100111", 100 => "100100110100011", 101 => "101010010110110", 
    102 => "000011011110101", 103 => "011000101111110", 104 => "111011010110110", 
    105 => "010100000011100", 106 => "010100111010001", 107 => "011010111101101", 
    108 => "010110000111111", 109 => "010000110100111", 110 => "101011101010110", 
    111 => "001001000010101", 112 => "111111100000110", 113 => "000001001110010", 
    114 => "111001001001101", 115 => "101101000010001", 116 => "101110101011000", 
    117 => "111100001000010", 118 => "111110011000011", 119 => "001100001101010", 
    120 => "010111000000001", 121 => "001000101011111", 122 => "100110011010101", 
    123 => "100110010111100", 124 => "111110100011001", 125 => "110000100110111", 
    126 => "110100000010111", 127 => "011110010110001", 128 => "010101111110001", 
    129 => "111011010100000", 130 => "001001101001101", 131 => "000010100101010", 
    132 => "000010010011011", 133 => "001000000011001", 134 => "111000001110100", 
    135 => "100010110011000", 136 => "011100000111010", 137 => "011010001000011", 
    138 => "010011010100011", 139 => "110111000110100", 140 => "010001000101010", 
    141 => "001000100000011", 142 => "100101111111100", 143 => "011110111011010", 
    144 => "110110001111100", 145 => "111011101000000", 146 => "101100110010011", 
    147 => "100100100001100", 148 => "110100101101110", 149 => "011000010100100", 
    150 => "001000010101101", 151 => "010101101101101", 152 => "111101100001010", 
    153 => "101011111101010", 154 => "011100000011101", 155 => "000111101100000", 
    156 => "110100101011001", 157 => "011100001101100", 158 => "001111010111001", 
    159 => "110011111110000", 160 => "101111001010100", 161 => "010110010011101", 
    162 => "101010100011110", 163 => "000010000000001", 164 => "110000000001011", 
    165 => "111001001001101", 166 => "100010011010111", 167 => "101111010110001", 
    168 => "010110100111111", 169 => "100100111110111", 170 => "111111111110111", 
    171 => "010001000001010", 172 => "010111010111101", 173 => "111001000100000", 
    174 => "100100011010101", 175 => "110011010111001", 176 => "010011101110000", 
    177 => "100011100011011", 178 => "110101111110011", 179 => "111111111101100", 
    180 => "111110101100000", 181 => "100000100100101", 182 => "011000110000100", 
    183 => "010011001111111", 184 => "011111001111101", 185 => "000111111010101", 
    186 => "000101001001011", 187 => "000100000011010", 188 => "110000000111111", 
    189 => "100110101111010", 190 => "110111111000111", 191 => "010110010011101", 
    192 => "001111000110110", 193 => "011010011111100", 194 => "011010010111111", 
    195 => "101100001000110", 196 => "101001101000111", 197 => "111110111011101", 
    198 => "101101000010101", 199 => "011000110001100", 200 => "000111010100001", 
    201 => "100000101110110", 202 => "001111111000111", 203 => "100101101011001", 
    204 => "010001011001101", 205 => "010011101011010", 206 => "000010000100001", 
    207 => "111001100001010", 208 => "100100110111100", 209 => "101101111110001", 
    210 => "000010010001011", 211 => "001101101111000", 212 => "010000011111000", 
    213 => "010101010011111", 214 => "111000000111011", 215 => "110101011000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2d_cl_me_ap_fixed_ap_fixed_32_16_5_3_0_config2_s_w2_V is
    generic (
        DataWidth : INTEGER := 15;
        AddressRange : INTEGER := 216;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2d_cl_me_ap_fixed_ap_fixed_32_16_5_3_0_config2_s_w2_V is
    component conv_2d_cl_me_ap_fixed_ap_fixed_32_16_5_3_0_config2_s_w2_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2d_cl_me_ap_fixed_ap_fixed_32_16_5_3_0_config2_s_w2_V_rom_U :  component conv_2d_cl_me_ap_fixed_ap_fixed_32_16_5_3_0_config2_s_w2_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


