-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pooling2d_large_cl_nopad_pad_me_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_V_V_empty_n : IN STD_LOGIC;
    data_V_V_read : OUT STD_LOGIC;
    res_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_V_V_full_n : IN STD_LOGIC;
    res_V_V_write : OUT STD_LOGIC );
end;


architecture behav of pooling2d_large_cl_nopad_pad_me_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal data_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln479_reg_451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln495_reg_498 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln500_reg_512 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln500_reg_512_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal icmp_ln500_reg_512_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_165 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_0_reg_176 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_0_reg_187 : STD_LOGIC_VECTOR (3 downto 0);
    signal k9_0_reg_210 : STD_LOGIC_VECTOR (3 downto 0);
    signal k9_0_reg_210_pp1_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state8_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal k10_0_reg_222 : STD_LOGIC_VECTOR (3 downto 0);
    signal k10_0_reg_222_pp2_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state12_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state15_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state16_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state17_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state18_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal reg_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln477_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_247_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_446 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln479_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln479_fu_259_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln203_fu_277_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln203_reg_460 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln203_4_fu_285_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln203_4_reg_465 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln203_fu_293_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln203_reg_470 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln203_reg_470_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln203_mid2_v_reg_474 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_fu_307_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln203_fu_327_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln203_reg_484 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln494_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal j_26_fu_344_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_26_reg_493 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln495_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln495_reg_498_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k_7_fu_356_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_7_reg_502 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal zext_ln500_fu_375_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln500_reg_507 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln500_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln500_reg_512_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln500_reg_512_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln500_reg_512_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k_8_fu_385_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_8_reg_516 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal add_ln203_4_fu_395_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln203_4_reg_521 : STD_LOGIC_VECTOR (7 downto 0);
    signal memory1_0_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_V_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal memory1_1_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_1_V_reg_542 : STD_LOGIC_VECTOR (31 downto 0);
    signal memory2_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_2_V_reg_553 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal select_ln510_fu_414_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln510_reg_559 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln510_5_fu_424_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln510_5_reg_565 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_fu_435_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_reg_571 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal memory1_0_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal memory1_0_V_ce0 : STD_LOGIC;
    signal memory1_0_V_we0 : STD_LOGIC;
    signal memory1_1_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal memory1_1_V_ce0 : STD_LOGIC;
    signal memory1_1_V_we0 : STD_LOGIC;
    signal memory2_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal memory2_V_ce0 : STD_LOGIC;
    signal memory2_V_we0 : STD_LOGIC;
    signal i_0_reg_154 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_phi_mux_j_0_phi_fu_180_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal j8_0_reg_198 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_phi_mux_k9_0_phi_fu_214_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_k10_0_phi_fu_226_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln203_10_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln498_fu_362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_12_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln502_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal icmp_ln480_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_265_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_313_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln480_fu_320_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln203_fu_324_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_367_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln203_11_fu_391_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1494_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_1_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_2_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component pooling2d_large_cl_nopad_pad_me_1_memory1_0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pooling2d_large_cl_nopad_pad_me_ap_fixed_ap_fixed_config6jbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    memory1_0_V_U : component pooling2d_large_cl_nopad_pad_me_1_memory1_0_V
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => memory1_0_V_address0,
        ce0 => memory1_0_V_ce0,
        we0 => memory1_0_V_we0,
        d0 => reg_234,
        q0 => memory1_0_V_q0);

    memory1_1_V_U : component pooling2d_large_cl_nopad_pad_me_1_memory1_0_V
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => memory1_1_V_address0,
        ce0 => memory1_1_V_ce0,
        we0 => memory1_1_V_we0,
        d0 => reg_234,
        q0 => memory1_1_V_q0);

    memory2_V_U : component pooling2d_large_cl_nopad_pad_me_ap_fixed_ap_fixed_config6jbC
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => memory2_V_address0,
        ce0 => memory2_V_ce0,
        we0 => memory2_V_we0,
        d0 => reg_234,
        q0 => memory2_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln477_fu_241_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln477_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln477_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln494_fu_338_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state8);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((icmp_ln494_fu_338_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state12) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state12)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state12);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln494_fu_338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_0_reg_154 <= i_reg_446;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_154 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln477_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_165 <= ap_const_lv8_0;
            elsif (((icmp_ln479_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_165 <= add_ln479_fu_259_p2;
            end if; 
        end if;
    end process;

    j8_0_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j8_0_reg_198 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                j8_0_reg_198 <= j_26_reg_493;
            end if; 
        end if;
    end process;

    j_0_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln477_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_176 <= ap_const_lv5_0;
            elsif (((icmp_ln479_reg_451 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_0_reg_176 <= select_ln203_4_reg_465;
            end if; 
        end if;
    end process;

    k10_0_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                k10_0_reg_222 <= ap_const_lv4_0;
            elsif (((icmp_ln500_reg_512 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                k10_0_reg_222 <= k_8_reg_516;
            end if; 
        end if;
    end process;

    k9_0_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln494_fu_338_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                k9_0_reg_210 <= ap_const_lv4_0;
            elsif (((icmp_ln495_reg_498 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                k9_0_reg_210 <= k_7_reg_502;
            end if; 
        end if;
    end process;

    k_0_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln477_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_0_reg_187 <= ap_const_lv4_0;
            elsif (((icmp_ln479_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                k_0_reg_187 <= k_fu_307_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln500_fu_379_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                add_ln203_4_reg_521 <= add_ln203_4_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln479_reg_451 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln203_reg_484 <= add_ln203_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_446 <= i_fu_247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln479_reg_451 <= icmp_ln479_fu_253_p2;
                trunc_ln203_reg_470_pp0_iter1_reg <= trunc_ln203_reg_470;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln495_reg_498 <= icmp_ln495_fu_350_p2;
                icmp_ln495_reg_498_pp1_iter1_reg <= icmp_ln495_reg_498;
                k9_0_reg_210_pp1_iter1_reg <= k9_0_reg_210;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln500_reg_512 <= icmp_ln500_fu_379_p2;
                icmp_ln500_reg_512_pp2_iter1_reg <= icmp_ln500_reg_512;
                k10_0_reg_222_pp2_iter1_reg <= k10_0_reg_222;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln500_reg_512_pp2_iter2_reg <= icmp_ln500_reg_512_pp2_iter1_reg;
                icmp_ln500_reg_512_pp2_iter3_reg <= icmp_ln500_reg_512_pp2_iter2_reg;
                icmp_ln500_reg_512_pp2_iter4_reg <= icmp_ln500_reg_512_pp2_iter3_reg;
                icmp_ln500_reg_512_pp2_iter5_reg <= icmp_ln500_reg_512_pp2_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_26_reg_493 <= j_26_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                k_7_reg_502 <= k_7_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                k_8_reg_516 <= k_8_fu_385_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln500_reg_512_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                max_V_reg_536 <= memory1_0_V_q0;
                pool_1_V_reg_542 <= memory1_1_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln500_reg_512_pp2_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                pool_2_V_reg_553 <= memory2_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln500_reg_512_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((icmp_ln495_reg_498 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((icmp_ln479_reg_451 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_234 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln479_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln203_4_reg_465 <= select_ln203_4_fu_285_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln479_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln203_reg_460 <= select_ln203_fu_277_p3;
                trunc_ln203_reg_470 <= trunc_ln203_fu_293_p1;
                zext_ln203_mid2_v_reg_474 <= select_ln203_4_fu_285_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln500_reg_512_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln510_5_reg_565 <= select_ln510_5_fu_424_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln500_reg_512_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln510_reg_559 <= select_ln510_fu_414_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln500_reg_512_pp2_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                tmp_V_reg_571 <= tmp_V_fu_435_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                    zext_ln500_reg_507(6 downto 3) <= zext_ln500_fu_375_p1(6 downto 3);
            end if;
        end if;
    end process;
    zext_ln500_reg_507(2 downto 0) <= "000";
    zext_ln500_reg_507(7) <= '0';

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter6, icmp_ln477_fu_241_p2, ap_CS_fsm_state2, icmp_ln479_fu_253_p2, ap_enable_reg_pp0_iter0, icmp_ln494_fu_338_p2, ap_CS_fsm_state7, icmp_ln495_fu_350_p2, ap_enable_reg_pp1_iter0, icmp_ln500_fu_379_p2, ap_enable_reg_pp2_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln477_fu_241_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln479_fu_253_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln479_fu_253_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln494_fu_338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln495_fu_350_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln495_fu_350_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln500_fu_379_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln500_fu_379_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln203_4_fu_395_p2 <= std_logic_vector(unsigned(zext_ln500_reg_507) + unsigned(zext_ln203_11_fu_391_p1));
    add_ln203_fu_327_p2 <= std_logic_vector(unsigned(zext_ln480_fu_320_p1) + unsigned(zext_ln203_fu_324_p1));
    add_ln479_fu_259_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_165) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(6);
    ap_CS_fsm_state19 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(data_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln479_reg_451)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln479_reg_451 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(data_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln479_reg_451)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln479_reg_451 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(data_V_V_empty_n, ap_enable_reg_pp1_iter1, icmp_ln495_reg_498)
    begin
                ap_block_pp1_stage0_11001 <= ((icmp_ln495_reg_498 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(data_V_V_empty_n, ap_enable_reg_pp1_iter1, icmp_ln495_reg_498)
    begin
                ap_block_pp1_stage0_subdone <= ((icmp_ln495_reg_498 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_01001_assign_proc : process(data_V_V_empty_n, res_V_V_full_n, ap_enable_reg_pp2_iter4, icmp_ln500_reg_512_pp2_iter3_reg, ap_enable_reg_pp2_iter6, icmp_ln500_reg_512_pp2_iter5_reg)
    begin
                ap_block_pp2_stage0_01001 <= (((icmp_ln500_reg_512_pp2_iter3_reg = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1)) or ((icmp_ln500_reg_512_pp2_iter5_reg = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1)));
    end process;


    ap_block_pp2_stage0_11001_assign_proc : process(data_V_V_empty_n, res_V_V_full_n, ap_enable_reg_pp2_iter4, icmp_ln500_reg_512_pp2_iter3_reg, ap_enable_reg_pp2_iter6, icmp_ln500_reg_512_pp2_iter5_reg)
    begin
                ap_block_pp2_stage0_11001 <= (((icmp_ln500_reg_512_pp2_iter3_reg = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1)) or ((icmp_ln500_reg_512_pp2_iter5_reg = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1)));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(data_V_V_empty_n, res_V_V_full_n, ap_enable_reg_pp2_iter4, icmp_ln500_reg_512_pp2_iter3_reg, ap_enable_reg_pp2_iter6, icmp_ln500_reg_512_pp2_iter5_reg)
    begin
                ap_block_pp2_stage0_subdone <= (((icmp_ln500_reg_512_pp2_iter3_reg = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1)) or ((icmp_ln500_reg_512_pp2_iter5_reg = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_pp2_stage0_iter4_assign_proc : process(data_V_V_empty_n, icmp_ln500_reg_512_pp2_iter3_reg)
    begin
                ap_block_state16_pp2_stage0_iter4 <= ((icmp_ln500_reg_512_pp2_iter3_reg = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state17_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state18_pp2_stage0_iter6_assign_proc : process(res_V_V_full_n, icmp_ln500_reg_512_pp2_iter5_reg)
    begin
                ap_block_state18_pp2_stage0_iter6 <= ((icmp_ln500_reg_512_pp2_iter5_reg = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(data_V_V_empty_n, icmp_ln479_reg_451)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln479_reg_451 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp1_stage0_iter1_assign_proc : process(data_V_V_empty_n, icmp_ln495_reg_498)
    begin
                ap_block_state9_pp1_stage0_iter1 <= ((icmp_ln495_reg_498 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln479_fu_253_p2)
    begin
        if ((icmp_ln479_fu_253_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state8_assign_proc : process(icmp_ln495_fu_350_p2)
    begin
        if ((icmp_ln495_fu_350_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state12_assign_proc : process(icmp_ln500_fu_379_p2)
    begin
        if ((icmp_ln500_fu_379_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln477_fu_241_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln477_fu_241_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter5)
    begin
        if (((ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_180_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln479_reg_451, j_0_reg_176, select_ln203_4_reg_465)
    begin
        if (((icmp_ln479_reg_451 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_j_0_phi_fu_180_p4 <= select_ln203_4_reg_465;
        else 
            ap_phi_mux_j_0_phi_fu_180_p4 <= j_0_reg_176;
        end if; 
    end process;


    ap_phi_mux_k10_0_phi_fu_226_p4_assign_proc : process(ap_block_pp2_stage0, icmp_ln500_reg_512, k10_0_reg_222, ap_CS_fsm_pp2_stage0, k_8_reg_516, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln500_reg_512 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_k10_0_phi_fu_226_p4 <= k_8_reg_516;
        else 
            ap_phi_mux_k10_0_phi_fu_226_p4 <= k10_0_reg_222;
        end if; 
    end process;


    ap_phi_mux_k9_0_phi_fu_214_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln495_reg_498, k9_0_reg_210, k_7_reg_502)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln495_reg_498 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_k9_0_phi_fu_214_p4 <= k_7_reg_502;
        else 
            ap_phi_mux_k9_0_phi_fu_214_p4 <= k9_0_reg_210;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_V_V_blk_n_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln479_reg_451, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln495_reg_498, ap_enable_reg_pp2_iter4, ap_block_pp2_stage0, icmp_ln500_reg_512_pp2_iter3_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln500_reg_512_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln495_reg_498 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln479_reg_451 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            data_V_V_blk_n <= data_V_V_empty_n;
        else 
            data_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln479_reg_451, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln495_reg_498, ap_enable_reg_pp2_iter4, icmp_ln500_reg_512_pp2_iter3_reg, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln500_reg_512_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((icmp_ln495_reg_498 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((icmp_ln479_reg_451 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            data_V_V_read <= ap_const_logic_1;
        else 
            data_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_247_p2 <= std_logic_vector(unsigned(i_0_reg_154) + unsigned(ap_const_lv4_1));
    icmp_ln1494_1_fu_420_p2 <= "1" when (signed(pool_2_V_reg_553) > signed(select_ln510_reg_559)) else "0";
    icmp_ln1494_2_fu_430_p2 <= "1" when (signed(reg_234) > signed(select_ln510_5_reg_565)) else "0";
    icmp_ln1494_fu_410_p2 <= "1" when (signed(pool_1_V_reg_542) > signed(max_V_reg_536)) else "0";
    icmp_ln477_fu_241_p2 <= "1" when (i_0_reg_154 = ap_const_lv4_8) else "0";
    icmp_ln479_fu_253_p2 <= "1" when (indvar_flatten_reg_165 = ap_const_lv8_80) else "0";
    icmp_ln480_fu_271_p2 <= "1" when (k_0_reg_187 = ap_const_lv4_8) else "0";
    icmp_ln494_fu_338_p2 <= "1" when (j8_0_reg_198 = ap_const_lv4_8) else "0";
    icmp_ln495_fu_350_p2 <= "1" when (ap_phi_mux_k9_0_phi_fu_214_p4 = ap_const_lv4_8) else "0";
    icmp_ln500_fu_379_p2 <= "1" when (ap_phi_mux_k10_0_phi_fu_226_p4 = ap_const_lv4_8) else "0";

    internal_ap_ready_assign_proc : process(icmp_ln477_fu_241_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln477_fu_241_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_26_fu_344_p2 <= std_logic_vector(unsigned(j8_0_reg_198) + unsigned(ap_const_lv4_1));
    j_fu_265_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_j_0_phi_fu_180_p4));
    k_7_fu_356_p2 <= std_logic_vector(unsigned(ap_phi_mux_k9_0_phi_fu_214_p4) + unsigned(ap_const_lv4_1));
    k_8_fu_385_p2 <= std_logic_vector(unsigned(ap_phi_mux_k10_0_phi_fu_226_p4) + unsigned(ap_const_lv4_1));
    k_fu_307_p2 <= std_logic_vector(unsigned(select_ln203_fu_277_p3) + unsigned(ap_const_lv4_1));

    memory1_0_V_address0_assign_proc : process(ap_block_pp0_stage0, ap_block_pp2_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter1, zext_ln203_10_fu_333_p1, zext_ln203_12_fu_400_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            memory1_0_V_address0 <= zext_ln203_12_fu_400_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            memory1_0_V_address0 <= zext_ln203_10_fu_333_p1(6 - 1 downto 0);
        else 
            memory1_0_V_address0 <= "XXXXXX";
        end if; 
    end process;


    memory1_0_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            memory1_0_V_ce0 <= ap_const_logic_1;
        else 
            memory1_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    memory1_0_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln203_reg_470_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln203_reg_470_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            memory1_0_V_we0 <= ap_const_logic_1;
        else 
            memory1_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    memory1_1_V_address0_assign_proc : process(ap_block_pp0_stage0, ap_block_pp2_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter1, zext_ln203_10_fu_333_p1, zext_ln203_12_fu_400_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            memory1_1_V_address0 <= zext_ln203_12_fu_400_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            memory1_1_V_address0 <= zext_ln203_10_fu_333_p1(6 - 1 downto 0);
        else 
            memory1_1_V_address0 <= "XXXXXX";
        end if; 
    end process;


    memory1_1_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            memory1_1_V_ce0 <= ap_const_logic_1;
        else 
            memory1_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    memory1_1_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln203_reg_470_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln203_reg_470_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            memory1_1_V_we0 <= ap_const_logic_1;
        else 
            memory1_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    memory2_V_address0_assign_proc : process(ap_block_pp1_stage0, ap_block_pp2_stage0, ap_enable_reg_pp2_iter2, ap_enable_reg_pp1_iter2, zext_ln498_fu_362_p1, zext_ln502_fu_405_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            memory2_V_address0 <= zext_ln502_fu_405_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            memory2_V_address0 <= zext_ln498_fu_362_p1(3 - 1 downto 0);
        else 
            memory2_V_address0 <= "XXX";
        end if; 
    end process;


    memory2_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            memory2_V_ce0 <= ap_const_logic_1;
        else 
            memory2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    memory2_V_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln495_reg_498_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((icmp_ln495_reg_498_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            memory2_V_we0 <= ap_const_logic_1;
        else 
            memory2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_V_blk_n_assign_proc : process(res_V_V_full_n, ap_block_pp2_stage0, ap_enable_reg_pp2_iter6, icmp_ln500_reg_512_pp2_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln500_reg_512_pp2_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1))) then 
            res_V_V_blk_n <= res_V_V_full_n;
        else 
            res_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_V_din <= tmp_V_reg_571;

    res_V_V_write_assign_proc : process(ap_enable_reg_pp2_iter6, icmp_ln500_reg_512_pp2_iter5_reg, ap_block_pp2_stage0_11001)
    begin
        if (((icmp_ln500_reg_512_pp2_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            res_V_V_write <= ap_const_logic_1;
        else 
            res_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln203_4_fu_285_p3 <= 
        j_fu_265_p2 when (icmp_ln480_fu_271_p2(0) = '1') else 
        ap_phi_mux_j_0_phi_fu_180_p4;
    select_ln203_fu_277_p3 <= 
        ap_const_lv4_0 when (icmp_ln480_fu_271_p2(0) = '1') else 
        k_0_reg_187;
    select_ln510_5_fu_424_p3 <= 
        pool_2_V_reg_553 when (icmp_ln1494_1_fu_420_p2(0) = '1') else 
        select_ln510_reg_559;
    select_ln510_fu_414_p3 <= 
        pool_1_V_reg_542 when (icmp_ln1494_fu_410_p2(0) = '1') else 
        max_V_reg_536;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_7_fu_313_p3 <= (zext_ln203_mid2_v_reg_474 & ap_const_lv3_0);
    tmp_8_fu_367_p3 <= (j8_0_reg_198 & ap_const_lv3_0);
    tmp_V_fu_435_p3 <= 
        reg_234 when (icmp_ln1494_2_fu_430_p2(0) = '1') else 
        select_ln510_5_reg_565;
    trunc_ln203_fu_293_p1 <= select_ln203_4_fu_285_p3(1 - 1 downto 0);
    zext_ln203_10_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_reg_484),64));
    zext_ln203_11_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_k10_0_phi_fu_226_p4),8));
    zext_ln203_12_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_4_reg_521),64));
    zext_ln203_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln203_reg_460),8));
    zext_ln480_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_313_p3),8));
    zext_ln498_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k9_0_reg_210_pp1_iter1_reg),64));
    zext_ln500_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_367_p3),8));
    zext_ln502_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k10_0_reg_222_pp2_iter1_reg),64));
end behav;
