-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity zeropad2d_cl_me_ap_fixed_ap_fixed_config50_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_V_V_empty_n : IN STD_LOGIC;
    data_V_V_read : OUT STD_LOGIC;
    res_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_V_V_full_n : IN STD_LOGIC;
    res_V_V_write : OUT STD_LOGIC );
end;


architecture behav of zeropad2d_cl_me_ap_fixed_ap_fixed_config50_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_82 : STD_LOGIC_VECTOR (7 downto 0) := "10000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal data_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln121_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal res_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln112_fu_115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln117_fu_127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln130_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal j_fu_121_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_166 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal i_fu_133_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_174 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal j_22_fu_145_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_22_reg_182 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state8 : BOOLEAN;
    signal j_21_fu_157_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_21_reg_190 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state13 : BOOLEAN;
    signal j_0_reg_71 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i1_0_reg_82 : STD_LOGIC_VECTOR (7 downto 0);
    signal j3_0_reg_93 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state10 : BOOLEAN;
    signal j6_0_reg_104 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state9 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((icmp_ln130_fu_151_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln130_fu_151_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln112_fu_115_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0))) and (icmp_ln112_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_0_reg_82 <= ap_const_lv8_0;
            elsif (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i1_0_reg_82 <= i_reg_174;
            end if; 
        end if;
    end process;

    j3_0_reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                j3_0_reg_93 <= ap_const_lv8_0;
            elsif ((not(((res_V_V_full_n = ap_const_logic_0) or (data_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                j3_0_reg_93 <= j_22_reg_182;
            end if; 
        end if;
    end process;

    j6_0_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                j6_0_reg_104 <= j_21_reg_190;
            elsif ((not(((icmp_ln117_fu_127_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln117_fu_127_p2 = ap_const_lv1_1))) then 
                j6_0_reg_104 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j_0_reg_71_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_71 <= j_reg_166;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_71 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln117_fu_127_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                i_reg_174 <= i_fu_133_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln130_fu_151_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                j_21_reg_190 <= j_21_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0)) or ((icmp_ln121_fu_139_p2 = ap_const_lv1_1) and (res_V_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                j_22_reg_182 <= j_22_fu_145_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln112_fu_115_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                j_reg_166 <= j_fu_121_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, data_V_V_empty_n, res_V_V_full_n, ap_CS_fsm_state8, icmp_ln121_fu_139_p2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state2, icmp_ln112_fu_115_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln117_fu_127_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, icmp_ln130_fu_151_p2, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln112_fu_115_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0))) and (icmp_ln112_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif ((not(((icmp_ln112_fu_115_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0))) and (icmp_ln112_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((icmp_ln117_fu_127_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln117_fu_127_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                elsif ((not(((icmp_ln117_fu_127_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0))) and (icmp_ln117_fu_127_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not((((icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0)) or ((icmp_ln121_fu_139_p2 = ap_const_lv1_1) and (res_V_V_full_n = ap_const_logic_0)))) and (icmp_ln121_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif ((not((((icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0)) or ((icmp_ln121_fu_139_p2 = ap_const_lv1_1) and (res_V_V_full_n = ap_const_logic_0)))) and (icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((res_V_V_full_n = ap_const_logic_0) or (data_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if ((not(((res_V_V_full_n = ap_const_logic_0) or (data_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if ((not(((icmp_ln130_fu_151_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln130_fu_151_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((icmp_ln130_fu_151_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0))) and (icmp_ln130_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state10_assign_proc : process(data_V_V_empty_n, res_V_V_full_n)
    begin
                ap_block_state10 <= ((res_V_V_full_n = ap_const_logic_0) or (data_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state13_assign_proc : process(res_V_V_full_n, icmp_ln130_fu_151_p2)
    begin
                ap_block_state13 <= ((icmp_ln130_fu_151_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(res_V_V_full_n, icmp_ln112_fu_115_p2)
    begin
                ap_block_state2 <= ((icmp_ln112_fu_115_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(res_V_V_full_n, icmp_ln117_fu_127_p2)
    begin
                ap_block_state5 <= ((icmp_ln117_fu_127_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state8_assign_proc : process(data_V_V_empty_n, res_V_V_full_n, icmp_ln121_fu_139_p2)
    begin
                ap_block_state8 <= (((icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0)) or ((icmp_ln121_fu_139_p2 = ap_const_lv1_1) and (res_V_V_full_n = ap_const_logic_0)));
    end process;


    ap_block_state9_assign_proc : process(data_V_V_empty_n, res_V_V_full_n)
    begin
                ap_block_state9 <= ((res_V_V_full_n = ap_const_logic_0) or (data_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, res_V_V_full_n, ap_CS_fsm_state13, icmp_ln130_fu_151_p2)
    begin
        if ((not(((icmp_ln130_fu_151_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln130_fu_151_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_V_V_blk_n_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_state8, icmp_ln121_fu_139_p2, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            data_V_V_blk_n <= data_V_V_empty_n;
        else 
            data_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_V_read_assign_proc : process(data_V_V_empty_n, res_V_V_full_n, ap_CS_fsm_state8, icmp_ln121_fu_139_p2, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((not(((res_V_V_full_n = ap_const_logic_0) or (data_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((res_V_V_full_n = ap_const_logic_0) or (data_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not((((icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0)) or ((icmp_ln121_fu_139_p2 = ap_const_lv1_1) and (res_V_V_full_n = ap_const_logic_0)))) and (icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            data_V_V_read <= ap_const_logic_1;
        else 
            data_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_133_p2 <= std_logic_vector(unsigned(i1_0_reg_82) + unsigned(ap_const_lv8_1));
    icmp_ln112_fu_115_p2 <= "1" when (j_0_reg_71 = ap_const_lv8_82) else "0";
    icmp_ln117_fu_127_p2 <= "1" when (i1_0_reg_82 = ap_const_lv8_80) else "0";
    icmp_ln121_fu_139_p2 <= "1" when (j3_0_reg_93 = ap_const_lv8_80) else "0";
    icmp_ln130_fu_151_p2 <= "1" when (j6_0_reg_104 = ap_const_lv8_82) else "0";

    internal_ap_ready_assign_proc : process(res_V_V_full_n, ap_CS_fsm_state13, icmp_ln130_fu_151_p2)
    begin
        if ((not(((icmp_ln130_fu_151_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln130_fu_151_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_21_fu_157_p2 <= std_logic_vector(unsigned(j6_0_reg_104) + unsigned(ap_const_lv8_1));
    j_22_fu_145_p2 <= std_logic_vector(unsigned(j3_0_reg_93) + unsigned(ap_const_lv8_1));
    j_fu_121_p2 <= std_logic_vector(unsigned(j_0_reg_71) + unsigned(ap_const_lv8_1));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_V_blk_n_assign_proc : process(res_V_V_full_n, ap_CS_fsm_state8, icmp_ln121_fu_139_p2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state2, icmp_ln112_fu_115_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln117_fu_127_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, icmp_ln130_fu_151_p2, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln112_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln121_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln130_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln117_fu_127_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            res_V_V_blk_n <= res_V_V_full_n;
        else 
            res_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    res_V_V_din_assign_proc : process(data_V_V_dout, data_V_V_empty_n, res_V_V_full_n, ap_CS_fsm_state8, icmp_ln121_fu_139_p2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state2, icmp_ln112_fu_115_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln117_fu_127_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, icmp_ln130_fu_151_p2, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((not(((res_V_V_full_n = ap_const_logic_0) or (data_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((res_V_V_full_n = ap_const_logic_0) or (data_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not((((icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0)) or ((icmp_ln121_fu_139_p2 = ap_const_lv1_1) and (res_V_V_full_n = ap_const_logic_0)))) and (icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            res_V_V_din <= data_V_V_dout;
        elsif ((((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((icmp_ln112_fu_115_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0))) and (icmp_ln112_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not((((icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0)) or ((icmp_ln121_fu_139_p2 = ap_const_lv1_1) and (res_V_V_full_n = ap_const_logic_0)))) and (icmp_ln121_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((icmp_ln130_fu_151_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0))) and (icmp_ln130_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((icmp_ln117_fu_127_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0))) and (icmp_ln117_fu_127_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            res_V_V_din <= ap_const_lv32_0;
        else 
            res_V_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    res_V_V_write_assign_proc : process(data_V_V_empty_n, res_V_V_full_n, ap_CS_fsm_state8, icmp_ln121_fu_139_p2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state2, icmp_ln112_fu_115_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln117_fu_127_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, icmp_ln130_fu_151_p2, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((icmp_ln112_fu_115_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0))) and (icmp_ln112_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((res_V_V_full_n = ap_const_logic_0) or (data_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((res_V_V_full_n = ap_const_logic_0) or (data_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not((((icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0)) or ((icmp_ln121_fu_139_p2 = ap_const_lv1_1) and (res_V_V_full_n = ap_const_logic_0)))) and (icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not((((icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln121_fu_139_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0)) or ((icmp_ln121_fu_139_p2 = ap_const_lv1_1) and (res_V_V_full_n = ap_const_logic_0)))) and (icmp_ln121_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((icmp_ln130_fu_151_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0))) and (icmp_ln130_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((icmp_ln117_fu_127_p2 = ap_const_lv1_0) and (res_V_V_full_n = ap_const_logic_0))) and (icmp_ln117_fu_127_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            res_V_V_write <= ap_const_logic_1;
        else 
            res_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
