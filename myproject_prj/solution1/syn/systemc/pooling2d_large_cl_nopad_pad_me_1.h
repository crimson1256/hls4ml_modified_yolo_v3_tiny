// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _pooling2d_large_cl_nopad_pad_me_1_HH_
#define _pooling2d_large_cl_nopad_pad_me_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "pooling2d_large_cl_nopad_pad_me_1_memory1_0_V.h"
#include "pooling2d_large_cl_nopad_pad_me_ap_fixed_ap_fixed_config6jbC.h"

namespace ap_rtl {

struct pooling2d_large_cl_nopad_pad_me_1 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<32> > data_V_V_dout;
    sc_in< sc_logic > data_V_V_empty_n;
    sc_out< sc_logic > data_V_V_read;
    sc_out< sc_lv<32> > res_V_V_din;
    sc_in< sc_logic > res_V_V_full_n;
    sc_out< sc_logic > res_V_V_write;


    // Module declarations
    pooling2d_large_cl_nopad_pad_me_1(sc_module_name name);
    SC_HAS_PROCESS(pooling2d_large_cl_nopad_pad_me_1);

    ~pooling2d_large_cl_nopad_pad_me_1();

    sc_trace_file* mVcdFile;

    pooling2d_large_cl_nopad_pad_me_1_memory1_0_V* memory1_0_V_U;
    pooling2d_large_cl_nopad_pad_me_1_memory1_0_V* memory1_1_V_U;
    pooling2d_large_cl_nopad_pad_me_ap_fixed_ap_fixed_config6jbC* memory2_V_U;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > data_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln479_reg_451;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<1> > icmp_ln495_reg_498;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter4;
    sc_signal< bool > ap_block_pp2_stage0;
    sc_signal< sc_lv<1> > icmp_ln500_reg_512;
    sc_signal< sc_lv<1> > icmp_ln500_reg_512_pp2_iter3_reg;
    sc_signal< sc_logic > res_V_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter6;
    sc_signal< sc_lv<1> > icmp_ln500_reg_512_pp2_iter5_reg;
    sc_signal< sc_lv<8> > indvar_flatten_reg_165;
    sc_signal< sc_lv<5> > j_0_reg_176;
    sc_signal< sc_lv<4> > k_0_reg_187;
    sc_signal< sc_lv<4> > k9_0_reg_210;
    sc_signal< sc_lv<4> > k9_0_reg_210_pp1_iter1_reg;
    sc_signal< bool > ap_block_state8_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state9_pp1_stage0_iter1;
    sc_signal< bool > ap_block_state10_pp1_stage0_iter2;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<4> > k10_0_reg_222;
    sc_signal< sc_lv<4> > k10_0_reg_222_pp2_iter1_reg;
    sc_signal< sc_logic > ap_CS_fsm_pp2_stage0;
    sc_signal< bool > ap_block_state12_pp2_stage0_iter0;
    sc_signal< bool > ap_block_state13_pp2_stage0_iter1;
    sc_signal< bool > ap_block_state14_pp2_stage0_iter2;
    sc_signal< bool > ap_block_state15_pp2_stage0_iter3;
    sc_signal< bool > ap_block_state16_pp2_stage0_iter4;
    sc_signal< bool > ap_block_state17_pp2_stage0_iter5;
    sc_signal< bool > ap_block_state18_pp2_stage0_iter6;
    sc_signal< bool > ap_block_pp2_stage0_11001;
    sc_signal< sc_lv<32> > reg_234;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln477_fu_241_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > i_fu_247_p2;
    sc_signal< sc_lv<4> > i_reg_446;
    sc_signal< sc_lv<1> > icmp_ln479_fu_253_p2;
    sc_signal< sc_lv<8> > add_ln479_fu_259_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<4> > select_ln203_fu_277_p3;
    sc_signal< sc_lv<4> > select_ln203_reg_460;
    sc_signal< sc_lv<5> > select_ln203_4_fu_285_p3;
    sc_signal< sc_lv<5> > select_ln203_4_reg_465;
    sc_signal< sc_lv<1> > trunc_ln203_fu_293_p1;
    sc_signal< sc_lv<1> > trunc_ln203_reg_470;
    sc_signal< sc_lv<1> > trunc_ln203_reg_470_pp0_iter1_reg;
    sc_signal< sc_lv<4> > zext_ln203_mid2_v_reg_474;
    sc_signal< sc_lv<4> > k_fu_307_p2;
    sc_signal< sc_lv<8> > add_ln203_fu_327_p2;
    sc_signal< sc_lv<8> > add_ln203_reg_484;
    sc_signal< sc_lv<1> > icmp_ln494_fu_338_p2;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<4> > j_26_fu_344_p2;
    sc_signal< sc_lv<4> > j_26_reg_493;
    sc_signal< sc_lv<1> > icmp_ln495_fu_350_p2;
    sc_signal< sc_lv<1> > icmp_ln495_reg_498_pp1_iter1_reg;
    sc_signal< sc_lv<4> > k_7_fu_356_p2;
    sc_signal< sc_lv<4> > k_7_reg_502;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<8> > zext_ln500_fu_375_p1;
    sc_signal< sc_lv<8> > zext_ln500_reg_507;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<1> > icmp_ln500_fu_379_p2;
    sc_signal< sc_lv<1> > icmp_ln500_reg_512_pp2_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln500_reg_512_pp2_iter2_reg;
    sc_signal< sc_lv<1> > icmp_ln500_reg_512_pp2_iter4_reg;
    sc_signal< sc_lv<4> > k_8_fu_385_p2;
    sc_signal< sc_lv<4> > k_8_reg_516;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter0;
    sc_signal< sc_lv<8> > add_ln203_4_fu_395_p2;
    sc_signal< sc_lv<8> > add_ln203_4_reg_521;
    sc_signal< sc_lv<32> > memory1_0_V_q0;
    sc_signal< sc_lv<32> > max_V_reg_536;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter2;
    sc_signal< sc_lv<32> > memory1_1_V_q0;
    sc_signal< sc_lv<32> > pool_1_V_reg_542;
    sc_signal< sc_lv<32> > memory2_V_q0;
    sc_signal< sc_lv<32> > pool_2_V_reg_553;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter3;
    sc_signal< sc_lv<32> > select_ln510_fu_414_p3;
    sc_signal< sc_lv<32> > select_ln510_reg_559;
    sc_signal< sc_lv<32> > select_ln510_5_fu_424_p3;
    sc_signal< sc_lv<32> > select_ln510_5_reg_565;
    sc_signal< sc_lv<32> > tmp_V_fu_435_p3;
    sc_signal< sc_lv<32> > tmp_V_reg_571;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state8;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter2;
    sc_signal< bool > ap_block_pp2_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp2_exit_iter0_state12;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter5;
    sc_signal< sc_lv<6> > memory1_0_V_address0;
    sc_signal< sc_logic > memory1_0_V_ce0;
    sc_signal< sc_logic > memory1_0_V_we0;
    sc_signal< sc_lv<6> > memory1_1_V_address0;
    sc_signal< sc_logic > memory1_1_V_ce0;
    sc_signal< sc_logic > memory1_1_V_we0;
    sc_signal< sc_lv<3> > memory2_V_address0;
    sc_signal< sc_logic > memory2_V_ce0;
    sc_signal< sc_logic > memory2_V_we0;
    sc_signal< sc_lv<4> > i_0_reg_154;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<5> > ap_phi_mux_j_0_phi_fu_180_p4;
    sc_signal< sc_lv<4> > j8_0_reg_198;
    sc_signal< sc_logic > ap_CS_fsm_state19;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<4> > ap_phi_mux_k9_0_phi_fu_214_p4;
    sc_signal< sc_lv<4> > ap_phi_mux_k10_0_phi_fu_226_p4;
    sc_signal< sc_lv<64> > zext_ln203_10_fu_333_p1;
    sc_signal< sc_lv<64> > zext_ln498_fu_362_p1;
    sc_signal< sc_lv<64> > zext_ln203_12_fu_400_p1;
    sc_signal< sc_lv<64> > zext_ln502_fu_405_p1;
    sc_signal< bool > ap_block_pp2_stage0_01001;
    sc_signal< sc_lv<1> > icmp_ln480_fu_271_p2;
    sc_signal< sc_lv<5> > j_fu_265_p2;
    sc_signal< sc_lv<7> > tmp_7_fu_313_p3;
    sc_signal< sc_lv<8> > zext_ln480_fu_320_p1;
    sc_signal< sc_lv<8> > zext_ln203_fu_324_p1;
    sc_signal< sc_lv<7> > tmp_8_fu_367_p3;
    sc_signal< sc_lv<8> > zext_ln203_11_fu_391_p1;
    sc_signal< sc_lv<1> > icmp_ln1494_fu_410_p2;
    sc_signal< sc_lv<1> > icmp_ln1494_1_fu_420_p2;
    sc_signal< sc_lv<1> > icmp_ln1494_2_fu_430_p2;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    sc_signal< sc_logic > ap_idle_pp2;
    sc_signal< sc_logic > ap_enable_pp2;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_state2;
    static const sc_lv<9> ap_ST_fsm_pp0_stage0;
    static const sc_lv<9> ap_ST_fsm_state6;
    static const sc_lv<9> ap_ST_fsm_state7;
    static const sc_lv<9> ap_ST_fsm_pp1_stage0;
    static const sc_lv<9> ap_ST_fsm_state11;
    static const sc_lv<9> ap_ST_fsm_pp2_stage0;
    static const sc_lv<9> ap_ST_fsm_state19;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<3> ap_const_lv3_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln203_4_fu_395_p2();
    void thread_add_ln203_fu_327_p2();
    void thread_add_ln479_fu_259_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_pp2_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state19();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_pp2_stage0();
    void thread_ap_block_pp2_stage0_01001();
    void thread_ap_block_pp2_stage0_11001();
    void thread_ap_block_pp2_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state10_pp1_stage0_iter2();
    void thread_ap_block_state12_pp2_stage0_iter0();
    void thread_ap_block_state13_pp2_stage0_iter1();
    void thread_ap_block_state14_pp2_stage0_iter2();
    void thread_ap_block_state15_pp2_stage0_iter3();
    void thread_ap_block_state16_pp2_stage0_iter4();
    void thread_ap_block_state17_pp2_stage0_iter5();
    void thread_ap_block_state18_pp2_stage0_iter6();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage0_iter2();
    void thread_ap_block_state8_pp1_stage0_iter0();
    void thread_ap_block_state9_pp1_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_condition_pp1_exit_iter0_state8();
    void thread_ap_condition_pp2_exit_iter0_state12();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_enable_pp2();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_idle_pp2();
    void thread_ap_phi_mux_j_0_phi_fu_180_p4();
    void thread_ap_phi_mux_k10_0_phi_fu_226_p4();
    void thread_ap_phi_mux_k9_0_phi_fu_214_p4();
    void thread_ap_ready();
    void thread_data_V_V_blk_n();
    void thread_data_V_V_read();
    void thread_i_fu_247_p2();
    void thread_icmp_ln1494_1_fu_420_p2();
    void thread_icmp_ln1494_2_fu_430_p2();
    void thread_icmp_ln1494_fu_410_p2();
    void thread_icmp_ln477_fu_241_p2();
    void thread_icmp_ln479_fu_253_p2();
    void thread_icmp_ln480_fu_271_p2();
    void thread_icmp_ln494_fu_338_p2();
    void thread_icmp_ln495_fu_350_p2();
    void thread_icmp_ln500_fu_379_p2();
    void thread_internal_ap_ready();
    void thread_j_26_fu_344_p2();
    void thread_j_fu_265_p2();
    void thread_k_7_fu_356_p2();
    void thread_k_8_fu_385_p2();
    void thread_k_fu_307_p2();
    void thread_memory1_0_V_address0();
    void thread_memory1_0_V_ce0();
    void thread_memory1_0_V_we0();
    void thread_memory1_1_V_address0();
    void thread_memory1_1_V_ce0();
    void thread_memory1_1_V_we0();
    void thread_memory2_V_address0();
    void thread_memory2_V_ce0();
    void thread_memory2_V_we0();
    void thread_real_start();
    void thread_res_V_V_blk_n();
    void thread_res_V_V_din();
    void thread_res_V_V_write();
    void thread_select_ln203_4_fu_285_p3();
    void thread_select_ln203_fu_277_p3();
    void thread_select_ln510_5_fu_424_p3();
    void thread_select_ln510_fu_414_p3();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_7_fu_313_p3();
    void thread_tmp_8_fu_367_p3();
    void thread_tmp_V_fu_435_p3();
    void thread_trunc_ln203_fu_293_p1();
    void thread_zext_ln203_10_fu_333_p1();
    void thread_zext_ln203_11_fu_391_p1();
    void thread_zext_ln203_12_fu_400_p1();
    void thread_zext_ln203_fu_324_p1();
    void thread_zext_ln480_fu_320_p1();
    void thread_zext_ln498_fu_362_p1();
    void thread_zext_ln500_fu_375_p1();
    void thread_zext_ln502_fu_405_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
